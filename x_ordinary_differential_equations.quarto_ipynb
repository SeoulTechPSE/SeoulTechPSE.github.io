{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "# Ordinary Differential Equations {#sec-ordinary-differential-equations}\n",
        "\n",
        "In this appendix, we will explore both symbolic and numerical approaches to solving ODE problems. For symbolic methods, we use the `sympy` module, and for numerical integration of ODEs, we use functions from the `integrate` module in `scipy`\n",
        "\n",
        "## Importing modules"
      ],
      "id": "a46c8568"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import numpy as np\n",
        "import sympy\n",
        "from sympy import pi\n",
        "sympy.init_printing()\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib as mpl\n",
        "from mpl_toolkits.mplot3d.axes3d import Axes3D"
      ],
      "id": "8dbc5aa5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Ordinary differential equations\n",
        "\n",
        "* The simplest form of an ordinary differential equation is\n",
        "\n",
        "  $$ \\frac{dy(x)}{dx} = f(x,y(x))$$\n",
        "\n",
        "  where $y(x)$ is the unknown function and $f(x, y(x))$ is known. $\\,$Only the first derivative occurs in the equation, and it is therefore an example of <span style=\"color:red\">a first-order ODE</span>\n",
        "\n",
        "* More generally, $~$we can write an $n$-th order ODE in <span style=\"color:green\">*explicit form*</span> as\n",
        "\n",
        "  $$ \\frac{d^ny}{dx^n} = f\\left(x,y,\\frac{dy}{dx},\\cdots,\\frac{d^{n-1}y}{dx^{n-1}}\\right)$$\n",
        "\n",
        "* or in <span style=\"color:green\">*implicit form*</span> as\n",
        "\n",
        "  $$ F\\left(x,y,\\frac{dy}{dx},\\cdots,\\frac{d^{n}y}{dx^{n}}\\right)=0$$\n",
        "\n",
        "  where $f$ and $F$ are known functions. \n",
        "  \n",
        "  The general solution of an $n$-th order ODE have $n$ free parameters\n",
        "that we need to specify, for example, as initial conditions for the unknown function and $n -1$ of its derivatives\n",
        "\n",
        "  $$y(0)=y_0, y'(0)=y_1, \\cdots, y^{n-1}(0)=y_{n-1}$$\n",
        "\n",
        "* An ODE can always be rewritten as a system of first-order ODEs. Specifically, the $n$-th order ODE on the\n",
        "explicit form can be written in the standard form by introducing $n$ new functions\n",
        "\n",
        "  $$y_1 = y,\\, y_2=\\frac{dy}{dx},\\, \\cdots,\\, y_n = \\frac{dy^{n-1}}{dx^{n-1}}$$\n",
        "\n",
        "  This gives the following system of first-order ODEs:\n",
        "\n",
        "  $$\\frac{d}{dx}\n",
        "    \\begin{bmatrix}\n",
        "    y_1\\\\ \n",
        "    \\vdots\\\\ \n",
        "    y_{n-1}\\\\ \n",
        "    y_n\n",
        "    \\end{bmatrix}\n",
        "    =\n",
        "    \\begin{bmatrix}\n",
        "    y_2\\\\ \n",
        "    \\vdots\\\\ \n",
        "    y_n\\\\ \n",
        "    f(x,y_1,\\cdots, y_n)\n",
        "    \\end{bmatrix}\n",
        "  $$\n",
        "\n",
        "* which also can be written in a more compact vector form:\n",
        "\n",
        "  $$\\frac{d\\mathbf{y}}{dx} = \\mathbf{f}(x,\\mathbf{y}(x))$$\n",
        "\n",
        "  This canonical form is particularly useful for numerical solutions of ODEs, and it is common that numerical methods for solving ODEs take the function $\\mathbf{f} = (f_1, f_2,\\cdots,f_n)$\n",
        "\n",
        "* If the functions $f_1, f_2, \\cdots, f_n$ are all linear, then the corresponding system of ODEs can be written on the simple form\n",
        "\n",
        "  $$ \\frac{d\\mathbf{y}}{dx} = \\mathbf{A}(\\mathbf{x})\\mathbf{y}(\\mathbf{x}) +\\mathbf{r}(\\mathbf{x}),$$\n",
        "\n",
        "  where $\\mathbf{A}(\\mathbf{x})$ is an $n\\times n$ matrix, and $\\mathbf{r}(\\mathbf{x})$ is an $n$-vector, that only depends on $\\mathbf{x}$. In this form, the $\\mathbf{r}(\\mathbf{x})$ is known as the source term, and the linear system is known as homogeneous if $\\mathbf{r}(\\mathbf{x})=\\mathbf{0}$, and nonhomogeneous otherwise\n",
        "\n",
        "* For certain properties and forms of the function $\\mathbf{f}(\\mathbf{x}, \\mathbf{y}(\\mathbf{x}))$, there may be known solutions and special methods for solving the corresponding ODE problem, but there is no general method for an arbitrary $\\mathbf{f}(\\mathbf{x}, \\mathbf{y}(\\mathbf{x}))$, other than approximate numerical methods\n",
        "\n",
        "* In addition to the properties of $\\mathbf{f}(\\mathbf{x}, \\mathbf{y}(\\mathbf{x}))$, the boundary conditions for an ODE also influence the solvability of the ODE problem, as well as which numerical approaches are available. There are two main types of boundary conditions for ODE problems: initial value conditions\n",
        "and boundary value conditions\n",
        "\n",
        "## Symbolic solution to ODEs\n",
        "\n",
        "* `Sympy` provides a generic ODE solver `sympy.dsolve`, which is able to find analytical solutions to many\n",
        "elementary ODEs. The `sympy.dsolve` function attempts to automatically classify a given ODE, and it may\n",
        "attempt a variety of techniques to find its solution\n",
        "\n",
        "* While `dsolve` can be used to solve many simple ODEs symbolically, as we will see in the following, it is worth keeping in mind that most ODEs cannot be solved analytically. Typical examples of ODEs where one can hope to find a symbolic solution are ODEs of first or second-order, or linear systems of first-order ODEs with only a few unknown functions\n",
        "\n",
        "* The first example is the simple first-order ODE for Newton's cooling law, \n",
        "\n",
        "  $$\\frac{dT(t)}{dt} = -k(T(t) -T_a)$$\n",
        "\n",
        "  with the initial value $T(0) = T_0$"
      ],
      "id": "25428b9f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "t, k, T0, Ta = sympy.symbols('t, k, T_0, T_a')\n",
        "T = sympy.Function('T')\n",
        "\n",
        "ode = T(t).diff(t) +k *(T(t) - Ta)\n",
        "\n",
        "# display the equation including the equality sign \n",
        "# and a right-hand side that is zero\n",
        "\n",
        "sympy.Eq(ode, 0) "
      ],
      "id": "297f40fb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ode_sol = sympy.dsolve(ode)\n",
        "ode_sol"
      ],
      "id": "bb54e87b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* The return value from `sympy.dsolve` is an instance of `sympy.Eq`, which is a symbolic representation of an equality"
      ],
      "id": "fdd2f7d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ode_sol.lhs, ode_sol.rhs"
      ],
      "id": "f48e7bd1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* Once the general solution has been found, $\\,$we need to use the initial conditions to find the values of the yet-to-be-determined integration constants\n",
        "\n",
        "* We first create a dictionary that describes the initial condition, `ics = {T(0): T0}`, which we can use with `sympy`'s `subs` method to apply the initial condition to the solution of the ODE. This results in an equation for the unknown integration constant $C_1$:"
      ],
      "id": "eb22f786"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ics = {T(0): T0}\n",
        "C_eq = sympy.Eq(ode_sol.lhs.subs(t, 0).subs(ics), \n",
        "                ode_sol.rhs.subs(t, 0))\n",
        "C_eq"
      ],
      "id": "66211eda",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* In the present example, the equation for $C_1$ is trivial to solve, but for the sake of generality, here we solve it using `sympy.solve`:"
      ],
      "id": "1d9033b1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "C_sol = sympy.solve(C_eq)\n",
        "C_sol"
      ],
      "id": "f94d2caa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ode_sol.subs(C_sol[0])"
      ],
      "id": "90bcd722",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* Applying the initial conditions and solving for the undetermined integration constants can be slightly tedious, and it worth while to collect these steps in a reusable function. The following function `apply_ics` is a basic\n",
        "implementation that generalizes these steps to a differential equation of arbitrary order"
      ],
      "id": "3fa0a99a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def apply_ics(sol, ics, x, known_params):\n",
        "    \"\"\"\n",
        "    Apply the initial conditions (ics), \n",
        "    given as a dictionary on the form \n",
        "    \n",
        "    ics = {y(0): y0, y(x).diff(x).subs(x, 0): y1, ...}\n",
        "    \n",
        "    to the solution of the ODE with independent variable x\n",
        "\n",
        "    The undetermined integration constants \n",
        "    \n",
        "    C1, C2, ... \n",
        "    \n",
        "    are extracted from the free symbols of the ODE solution, \n",
        "    excluding symbols in the known_params list\n",
        "    \"\"\"\n",
        "    free_params = sol.free_symbols - set(known_params)\n",
        "    eqs = [(sol.lhs.diff(x, n) \n",
        "           - sol.rhs.diff(x, n)).subs(x, 0).subs(ics)\n",
        "           for n in range(len(ics))]\n",
        "    sol_params = sympy.solve(eqs, free_params)\n",
        "    \n",
        "    return sol.subs(sol_params)"
      ],
      "id": "f035ff58",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "T_sol = apply_ics(ode_sol, ics, t, [k, Ta])\n",
        "T_sol"
      ],
      "id": "1036e473",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "x = np.linspace(0, 4, 100)\n",
        "y = sympy.lambdify((t, k), \n",
        "                   T_sol.rhs.subs({T0: 5, Ta: 1}), \n",
        "                   'numpy')\n",
        "\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "for k in [1, 2, 3]:\n",
        "  ax.plot(x, y(x, k), label=rf'$k={k}$')\n",
        "\n",
        "ax.set_title(rf'${sympy.latex(T_sol)}$', fontsize=12)\n",
        "ax.set_xlabel(r\"$x$\", fontsize=12)\n",
        "ax.set_ylabel(r\"$y$\", fontsize=12)\n",
        "ax.legend()\n",
        "ax.set_xlim(0, 4)\n",
        "ax.set_ylim(1, 5)\n",
        "ax.tick_params(which='both', direction='in', axis='x', pad=7)"
      ],
      "id": "6ffe122e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* As an example of a slightly more complicated problem, $\\,$consider the ODE for a damped harmonic oscillator, which is a second-order ODE on the form\n",
        "\n",
        "  $$ \\frac{d^2x(t)}{dt^2} +2\\gamma \\omega_0 \\frac{dx(t)}{dt} +\\omega_0^2 x(t) = 0$$\n",
        "\n",
        "  where $x(t)$ is the position of the oscillator at time $t$, $\\,\\omega_0$ is\n",
        "the frequency for the undamped case, and $\\,\\gamma$ is the damping ratio"
      ],
      "id": "90e64644"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "t, omega0, gamma = sympy.symbols('t, omega_0, gamma', \n",
        "                                 positive=True)\n",
        "x = sympy.Function(\"x\")\n",
        "\n",
        "ode = (x(t).diff(t, 2) \n",
        "      +2 *gamma* omega0 *x(t).diff(t) \n",
        "      +omega0**2 *x(t))\n",
        "sympy.Eq(ode, 0)"
      ],
      "id": "7f1db28d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ode_sol = sympy.dsolve(ode)\n",
        "ode_sol"
      ],
      "id": "b0416591",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* Since this is a second-order ODE, there are two undetermined integration constants in the general solution. We need to specify initial conditions for both the position $x(0)$ and the velocity $x'(0)$ to single out a particular solution to the ODE"
      ],
      "id": "7d920d4d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "ics = {x(0): 1, x(t).diff(t).subs(t, 0): 0}\n",
        "x_sol = apply_ics(ode_sol, ics, t, [omega0, gamma])\n",
        "C1 = x_sol.rhs.args[0].args[0]\n",
        "C1"
      ],
      "id": "351de288",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "C2 = x_sol.rhs.args[1].args[0]\n",
        "C2"
      ],
      "id": "5160437f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* This is the solution for the dynamics of the oscillator for arbitrary values of $t$, $\\omega_0$ and $\\gamma$. $~$However, substituting $\\gamma = 1$, $\\,$which corresponds to critical damping, directly into this expression results in *a division by zero* error, and for this particular choice of $\\gamma$, we need to be careful and compute the limit where $\\gamma \\rightarrow 1$"
      ],
      "id": "3ad193b4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "x_critical = sympy.limit(x_sol.rhs, gamma, 1)\n",
        "x_critical"
      ],
      "id": "55a5a49b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* Finally, $\\,$we plot the solutions for $\\omega_0 = 2\\pi$ and a sequence of different values of the damping ratio $\\gamma$"
      ],
      "id": "f493e4a9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "tt = np.linspace(0, 3, 250)\n",
        "for g in [0.1, 0.5, 1, 2.0, 5.0]:\n",
        "    if g == 1:\n",
        "        x_t = sympy.lambdify(t, \n",
        "          x_critical.subs({omega0: 2.0 *pi}), 'numpy')\n",
        "    else:\n",
        "        x_t = sympy.lambdify(t, \n",
        "          x_sol.rhs.subs({omega0: 2.0 *pi, gamma: g}), 'numpy')\n",
        "    ax.plot(tt, x_t(tt).real, label=rf'$\\gamma = {g: .1f}$')\n",
        "\n",
        "ax.set_xlabel(r\"$t$\", fontsize=12)\n",
        "ax.set_ylabel(r\"$x(t)$\", fontsize=12)\n",
        "ax.legend()\n",
        "ax.set_xlim(0, 3)\n",
        "ax.set_ylim(-1, 1.5)\n",
        "ax.tick_params(which='both', direction='in', axis='x', pad=7)"
      ],
      "id": "9800aeeb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "* Even many first-order ODEs cannot be solved exactly in terms of elementary functions. \n",
        "For example, consider $\\displaystyle\\frac{dy}{dx} = x +y^2$, $\\,$which is an example of an ODE that does not have any closed-form solution"
      ],
      "id": "56c6c275"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "x = sympy.symbols('x', positive=True)\n",
        "y = sympy.Function('y')\n",
        "u = sympy.Function('u')\n",
        "\n",
        "f = y(x)**2 +x \n",
        "                    \n",
        "ode = y(x).diff(x) -f\n",
        "ode"
      ],
      "id": "741501fb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "sympy.classify_ode(ode)"
      ],
      "id": "2f126438",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* See @sec-2-5"
      ],
      "id": "dadd50a3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# sympy bug: '1st_rational_riccati' not working\n",
        "q0 = x\n",
        "q1 = sympy.Integer('0')\n",
        "q2 = sympy.Integer('1')\n",
        "\n",
        "S = q2 *q0\n",
        "R = q1 +q2.diff(x) /q2\n",
        "\n",
        "ode_ = u(x).diff(x, 2) -R *u(x).diff(x) +S *u(x)\n",
        "u_sol = sympy.dsolve(ode_).rhs\n",
        "u_sol"
      ],
      "id": "02e43a04",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "y_sol = -u_sol.diff(x) /(q2 *u_sol)\n",
        "y_sol"
      ],
      "id": "1f75a16f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "C1 = sympy.Symbol('C1')\n",
        "C1_ = sympy.solve(y_sol.subs({x: 0}), C1)[0]\n",
        "C1_"
      ],
      "id": "34175f89",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "y_sol = y_sol.subs({C1: C1_}).cancel()\n",
        "y_sol"
      ],
      "id": "c2c50054",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "* For many other types of equations, `sympy` outright fails to produce any solution at all. $\\,$For example, if we attempt to solve the second-order \n",
        "\n",
        "  $$\\frac{d^2y}{dx^2} =x +y^2$$"
      ],
      "id": "d616c5d3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "sympy.Eq(y(x).diff(x, 2), f)"
      ],
      "id": "0204ab0d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "try:\n",
        "  sympy.dsolve(y(x).diff(x, 2) -f)\n",
        "except Exception as e:\n",
        "  print(e)"
      ],
      "id": "ef5a6a74",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Direction fields\n",
        "\n",
        "* A direction field graph is a simple but useful technique to visualize possible solutions to arbitrary first-order ODEs. It is made up of short lines that show the slope of the unknown function on a grid in the $x$–$y$ plane. This graph can be easily produced because the slope of $y(x)$ at arbitrary points of the $x$–$y$ plane is given by the definition of the ODE:\n",
        "\n",
        "  $$\\frac{dy}{dx}=f(x,y(x))$$\n",
        "\n",
        "  The reason why the direction field graph is useful is that smooth and continuous curves that tangent the slope lines (at every point) in the direction field graph are possible solutions to the ODE\n"
      ],
      "id": "ab5ab715"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def plot_direction_field(x, y_x, f_xy, \n",
        "        x_lim=(-5, 5), y_lim=(-5, 5), ax=None):\n",
        "    \n",
        "    f_np = sympy.lambdify((x, y_x), f_xy, 'numpy')\n",
        "    \n",
        "    x_vec = np.linspace(x_lim[0], x_lim[1], 20)\n",
        "    y_vec = np.linspace(y_lim[0], y_lim[1], 20)\n",
        "    \n",
        "    if ax is None:\n",
        "      _, ax = plt.subplots(figsize=(4, 4))\n",
        "\n",
        "    dx = x_vec[1] -x_vec[0]\n",
        "    dy = y_vec[1] -y_vec[0]\n",
        "    scale = 0.8 *dx\n",
        "\n",
        "    for m, x_ in enumerate(x_vec):\n",
        "      for n, y_ in enumerate(y_vec):\n",
        "        Dy = f_np(x_, y_) *dx\n",
        "        Dx = scale *dx /np.sqrt(dx**2 +Dy**2)\n",
        "        Dy = scale *Dy /np.sqrt(dx**2 +Dy**2)\n",
        "        ax.plot([x_ -Dx/2, x_ +Dx/2], \n",
        "                [y_ -Dy/2, y_ +Dy/2], 'b', lw=1)\n",
        "        ax.plot(x_ +Dx/2, y_ +Dy/2, 'bo', ms=2)  \n",
        " \n",
        "    ax.set_xlim(x_lim[0], x_lim[1])\n",
        "    ax.set_ylim(y_lim[0], y_lim[1])\n",
        "    ax.tick_params(which='both', direction='in')\n",
        "    title_ = sympy.latex(sympy.Eq(y(x).diff(x), f_xy))\n",
        "    ax.set_title(rf'${title_}$', fontsize=12)\n",
        "    \n",
        "    return ax"
      ],
      "id": "7ad8c0ed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* With this function, we can produce the direction field graphs for the ODEs. The direction lines in the graphs suggest how the curves that are solutions to the corresponding ODE behave, and direction field graphs are therefore a useful tool for visualizing solutions to ODEs that cannot be solved analytically"
      ],
      "id": "85109a76"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "x = sympy.symbols('x')\n",
        "y = sympy.Function('y')\n",
        "\n",
        "f = y(x)**2 +x"
      ],
      "id": "a403ea37",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "\n",
        "fig, ax = plt.subplots(1, 1, figsize=(5, 5))\n",
        "\n",
        "# left panel\n",
        "plot_direction_field(x, y(x), f, ax=ax)\n",
        "\n",
        "x_vec = np.linspace(-5, 5, 300)\n",
        "y_vec = sympy.lambdify(x, y_sol)(x_vec)\n",
        "\n",
        "threshold = 20\n",
        "y_vec[y_vec > threshold] = np.inf\n",
        "y_vec[y_vec <-threshold] = np.inf\n",
        "\n",
        "ax.plot(x_vec, y_vec, 'r', lw=2)  "
      ],
      "id": "c272a635",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* The following code generates the direction field graphs for \n",
        "\n",
        "  $f(x,y(x))=y^2(x) +x$\n",
        "  \n",
        "  $f(x,y(x))=-x/y(x)$\n",
        "  \n",
        "  $f(x,y(x))=y^2(x)/x$"
      ],
      "id": "ac2abc11"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "x = sympy.symbols('x')\n",
        "y = sympy.Function('y')\n",
        "\n",
        "fig, axes = plt.subplots(3, 1, figsize=(4, 13))\n",
        "\n",
        "plot_direction_field(x, y(x), y(x)**2 +x, ax=axes[0])\n",
        "plot_direction_field(x, y(x), -x /y(x), ax=axes[1])\n",
        "plot_direction_field(x, y(x), y(x)**2 /x, ax=axes[2])"
      ],
      "id": "9d4762c9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Solving ODEs using Laplace Transformation\n",
        "\n",
        "* A technique that can be used to solve certain ODE problems is to do Laplace transform on the ODE, which for many problems results in an algebraic equation that is easier to solve. The solution to the algebraic equation can then be transformed back to the original domain with an inverse Laplace transform, to obtain the solution to the original problem. For example, consider the following differential equation for a driven harmonic oscillator:\n",
        "\n",
        "  $$ \\frac{d^2 y}{dt^2} +2\\frac{dy}{dt} +10y =2\\sin 3t$$\n",
        "\n",
        "* [_laplace_trabsform_expansion.py](_laplace_transform_expansion.py)\n",
        "\n",
        "  * `laplace_tranform_()` is the expanded version of `laplace_transform()`\n",
        "\n",
        "  * `subs_()` is the modified function of `sub()` method"
      ],
      "id": "a44b961c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# Process Systems Lab., SeoulTech\n",
        "# April 15, 2021 Authored by Kee-Youn Yoo\n",
        "# April 4, 2024 Modifed for sympy version 1.12\n",
        "\n",
        "import sympy\n",
        "from sympy import integrate, laplace_transform\n",
        "from functools import reduce\n",
        "\n",
        "def subs_(e, s1, s2):\n",
        "\n",
        "    if isinstance(e, sympy.LaplaceTransform):\n",
        "        s_ = e.args[2]\n",
        "        return e.subs(s_, s).subs(s1, s2).subs(s, s_)\n",
        "\n",
        "    if isinstance(e, (sympy.Add, sympy.Mul, \n",
        "                      sympy.Derivative, sympy.Integral, sympy.Subs)):\n",
        "        tp = type(e)      \n",
        "        return tp(*[subs_(arg, s1, s2) for arg in e.args])\n",
        "\n",
        "    return e\n",
        "\n",
        "\n",
        "def laplace_transform_(*e, **f):\n",
        "    \n",
        "    t_ = e[1]\n",
        "    \n",
        "    if isinstance(e[0], (int, float)):\n",
        "        return laplace_transform(*e, **f)[0]\n",
        "\n",
        "    k = len(e[0].args)\n",
        "    \n",
        "    terms = []\n",
        "    for i in range(k):\n",
        "        if  k == 1:\n",
        "            terms.append(e[0])\n",
        "        else:\n",
        "            if isinstance(e[0], (sympy.Mul, sympy.Derivative, sympy.Integral)):\n",
        "                terms.append(e[0])\n",
        "                break\n",
        "            else:\n",
        "                terms.append(e[0].args[i])\n",
        "    \n",
        "    m = len(terms)\n",
        "    if m == 0:\n",
        "        return laplace_transform(*e, **f)[0]\n",
        "    \n",
        "    Leq = sympy.Float('0')\n",
        "    for i in range(m):\n",
        "\n",
        "        flag = 0\n",
        "        l = len(terms[i].args) \n",
        "        if l == 1:\n",
        "            terms__ = terms[i]\n",
        "        else:\n",
        "            terms__ = sympy.Integer('1')\n",
        "            for j in range(l):\n",
        "                if isinstance(terms[i], (sympy.Derivative, sympy.Integral)):\n",
        "                    terms__ = terms[i]\n",
        "                    break\n",
        "                else: \n",
        "                    if isinstance(terms[i].args[j], sympy.exp):\n",
        "                        a = terms[i].args[j].args[0].args\n",
        "                        if len(a) == 2:\n",
        "                            flag = a[0]\n",
        "                        else:\n",
        "                            flag = a[0] *a[2]                                                         \n",
        "                    else:\n",
        "                        terms__ *= terms[i].args[j]\n",
        "\n",
        "        Leq_ = laplace_transform_expansion(laplace_transform(terms__, e[1], e[2], **f)[0])\n",
        "\n",
        "        if flag != 0: \n",
        "            Leq_ = Leq_.subs(e[2], e[2] -flag)\n",
        "\n",
        "        Leq += Leq_\n",
        "\n",
        "    return Leq.doit()\n",
        "\n",
        "\n",
        "def laplace_transform_expansion(e):\n",
        "    \"\"\"\n",
        "    Evaluate the laplace transforms of derivatives, integrals, and composites of functions\n",
        "    \"\"\"       \n",
        "    \n",
        "    if isinstance(e, sympy.LaplaceTransform):\n",
        "        \n",
        "        ex, t, s = e.args\n",
        "        \n",
        "        # Preliminaries --------------------------\n",
        "\n",
        "        if len(ex.args) == 1: \n",
        "           \n",
        "            c = []\n",
        "            for arg in ex.args[0].args:\n",
        "                if arg != t: c.append(arg)\n",
        "                    \n",
        "            if len(c) == 0:\n",
        "                return e\n",
        "            else:\n",
        "                d = reduce(lambda x, y: x *y, c)\n",
        "                #return (sympy.LaplaceTransform(ex.subs(d *t, t), t, s/d) /d)\n",
        "                return (sympy.LaplaceTransform(ex.subs(d *t, t), t, s))\n",
        "               \n",
        "        if isinstance(ex.args[0], sympy.Pow): \n",
        "            ex = sympy.simplify(ex)\n",
        "            \n",
        "        ex0 = ex.args[0]           \n",
        "        if not isinstance(ex, sympy.Integral):\n",
        "            ex1 = reduce(lambda x, y: x *y, ex.args[1:])\n",
        "           \n",
        "        # -----------------------------------------            \n",
        "      \n",
        "        if isinstance(ex, sympy.Derivative):\n",
        "\n",
        "            n = ex1.args[1]           \n",
        "            return ((s**n) *sympy.LaplaceTransform(ex0, t, s)\n",
        "                    -sum([s**(n -i) *sympy.diff(ex0, t, i -1).subs(t, 0) for i in range(1, n +1)]))\n",
        "        \n",
        "        elif isinstance(ex, sympy.Integral):        \n",
        "            \n",
        "            if len(ex.args[1]) == 3:\n",
        "\n",
        "                tau, t0, t = ex.args[-1]\n",
        "                if t0 != 0: return e                \n",
        "                       \n",
        "                if len(ex0.args) == 2:\n",
        "               \n",
        "                    f, g = ex0.args[0], ex0.args[1]\n",
        "                \n",
        "                    if f.args[0] == tau and g.args[0] == t -tau:           \n",
        "                        return (sympy.LaplaceTransform(f, tau, s).subs(tau, t) \n",
        "                               *sympy.LaplaceTransform(g, t -tau, s)).subs(t -tau, t)\n",
        "                    elif f.args[0] == t -tau and g.args[0] == tau:\n",
        "                        return (sympy.LaplaceTransform(f, t -tau, s).subs(t -tau, t) \n",
        "                               *sympy.LaplaceTransform(g, tau, s)).subs(tau, t)\n",
        "                    else:\n",
        "                        return e\n",
        "                    \n",
        "                else:\n",
        "                    n = len(ex.args) -2\n",
        "                    if n > 0:\n",
        "                        for i in range(n):\n",
        "                            tau_, t0_, t_ = ex.args[i +1]\n",
        "                            ex0 = integrate(ex0, (tau_, 0, t_))\n",
        "                        ex0 = ex0.subs(tau_, t).subs(t_, t)\n",
        "                    else:\n",
        "                        ex0 = ex0.subs(tau, t)\n",
        "                        \n",
        "                    return (laplace_transform_expansion(sympy.LaplaceTransform(ex0, t, s)) /s)\n",
        "            else:\n",
        "                return e\n",
        "\n",
        "        elif isinstance(ex0, sympy.exp):         \n",
        "\n",
        "            c = []\n",
        "            for arg in ex0.args[0].args:\n",
        "                if arg != t: c.append(arg)\n",
        "\n",
        "            d = reduce(lambda x, y: x *y, c)\n",
        "                       \n",
        "            if ex0 == sympy.exp(d *t):\n",
        "                return (laplace_transform_expansion(sympy.LaplaceTransform(ex1, t, s)).subs(s, s -d))\n",
        "            else:\n",
        "                return e                \n",
        "        \n",
        "        elif isinstance(ex0, sympy.Pow) or ex0 == t:  \n",
        "            \n",
        "            if ex0 == t:\n",
        "                n = 1\n",
        "            else:\n",
        "                n = ex0.args[1]\n",
        "                if not n.is_integer: return e\n",
        "                      \n",
        "            c = laplace_transform_expansion(sympy.LaplaceTransform(ex1, t, s))\n",
        "            \n",
        "            if isinstance(c, sympy.Add):\n",
        "                for i in range(len(c.args)):\n",
        "                    for j in range(len(c.args[i].args)):\n",
        "                        if isinstance(c.args[i].args[j], sympy.LaplaceTransform):\n",
        "                            d = c.args[i].args[j].args[-1]\n",
        "            elif isinstance(c, sympy.Mul):\n",
        "                for i in range(len(c.args)):\n",
        "                    if isinstance(c.args[i], sympy.LaplaceTransform):\n",
        "                        d = c.args[i].args[-1]                   \n",
        "            elif isinstance(c, sympy.LaplaceTransform):\n",
        "                d = c.args[-1]\n",
        "            # else:\n",
        "            #     return ((-1)**n *sympy.diff(c, (s, n)))\n",
        "            \n",
        "            #return ((-1)**n *sympy.diff(c.subs(d, s), (s, n)).subs(s, d))\n",
        "            s_ = sympy.Symbol('s')\n",
        "\n",
        "            return (-1)**n *sympy.diff(c.subs(d, s_), (s_, n)).subs(s_, d)\n",
        "\n",
        "        elif isinstance(ex0, (sympy.Derivative, sympy.Integral)):\n",
        "                       \n",
        "            if isinstance(ex1, sympy.exp):\n",
        "                \n",
        "                c = []\n",
        "                for arg in ex1.args[0].args:\n",
        "                    if arg != t: c.append(arg)\n",
        "\n",
        "                d = reduce(lambda x, y: x *y, c)\n",
        "\n",
        "                return (laplace_transform_expansion(sympy.LaplaceTransform(ex0, t, s).subs(s, s -d)))       \n",
        "            \n",
        "        elif isinstance(ex0, sympy.Heaviside):          \n",
        "            \n",
        "            t, m_a = ex0.args[0].args\n",
        "            \n",
        "            if ex1.args[0] == t +m_a:\n",
        "                f = ex1.subs(t +m_a, t)\n",
        "                return (sympy.exp(m_a *s) *sympy.LaplaceTransform(f, t, s))\n",
        "            elif ex1.args[0] == t:\n",
        "                f = ex1.subs(t, t -m_a)\n",
        "                return (sympy.exp(m_a *s) *sympy.LaplaceTransform(f, t, s))\n",
        "            else:\n",
        "                return e\n",
        "        \n",
        "    if isinstance(e, (sympy.Add, sympy.Mul, \n",
        "       sympy.Derivative, sympy.Integral, sympy.Subs)):\n",
        "        tp = type(e)      \n",
        "        return tp(*[laplace_transform_expansion(arg) for arg in e.args])\n",
        "\n",
        "    return e"
      ],
      "id": "65f80240",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "t = sympy.symbols(\"t\", positive=True)\n",
        "y = sympy.Function(\"y\")\n",
        "\n",
        "ode = (y(t).diff(t, 2) \n",
        "      +2 *y(t).diff(t) \n",
        "      +10 *y(t) \n",
        "      -2 *sympy.sin(3*t))\n",
        "ics = {y(0): 1, y(t).diff(t).subs(t, 0): 0}\n",
        "\n",
        "ode"
      ],
      "id": "b550dbb3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "s = sympy.symbols('s', real=True)\n",
        "Y = sympy.Function('Y')\n",
        "\n",
        "Ly = laplace_transform_(y(t), t, s)"
      ],
      "id": "9e648ddb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "Lode = subs_(laplace_transform_(ode, t, s), Ly, Y(s)).subs(ics)\n",
        "Lode"
      ],
      "id": "57a2d748",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "Y_sol = sympy.solve(Lode, Y(s))[0]\n",
        "Y_sol "
      ],
      "id": "45195173",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "y_sol = sympy.inverse_laplace_transform(Y_sol, s, t)\n",
        "y_sol"
      ],
      "id": "f6ae1b79",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "y_t = sympy.lambdify(t, y_sol, modules=['numpy'])"
      ],
      "id": "0b5e350b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "fig, ax = plt.subplots(figsize=(6, 4))\n",
        "\n",
        "tt = np.linspace(0, 10, 500)\n",
        "ax.plot(tt, y_t(tt))\n",
        "ax.set_xlabel(r\"$t$\", fontsize=12)\n",
        "ax.set_ylabel(r\"$y(t)$\", fontsize=12)\n",
        "fig.tight_layout()"
      ],
      "id": "89c77bdf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Numerical methods for solving ODEs\n",
        "\n",
        "* In practice, ODE problems are therefore mainly solved with numerical methods. There are many approaches to solving ODEs numerically, and most of them are designed for problems that are formulated as a system of first-order ODEs on the standard form:\n",
        "\n",
        "  $$ \\frac{d\\mathbf{y}}{dx} = \\mathbf{f}(x, \\mathbf{y}(x))$$\n",
        "\n",
        "* The basic idea of many numerical methods for ODEs is captured in Euler's method. This method can, for example, be derived from a Taylor-series expansion of $y(x)$ around the point $x$:\n",
        "\n",
        "  $$ y(x+h) = y(x) +\\frac{dy(x)}{dx}h +\\frac{d^2 y(x)}{dx^2} h^2 + \\cdots, $$\n",
        "\n",
        "  where for notational simplicity we consider the case when $y(x)$ is a scalar function\n",
        "\n",
        "* By dropping terms of second order or higher, $\\,$we get the approximate equation\n",
        "\n",
        "  $$ y(x+h) \\approx y(x) +\\frac{dy(x)}{dx}h, $$\n",
        "\n",
        "  which is accurate to first order in the step size $h$. This equation can be turned into an iteration formula by discretizing the $x$ variable, $x_0$, $x_1$, $\\cdots$, $x_k$, $\\,$choosing the step size $h_k =x_{k+1} -x_{k}$, $\\,$and denoting $y_k = y(x_k)$. $\\,$The resulting iteration formula: \n",
        "\n",
        "  $$\\color{red}{y_{k+1} \\approx y_{k} +f(x_k, y_k) h_k},$$ \n",
        "\n",
        "  is known as the <span style=\"color:blue\">*forward Euler method*</span>, \n",
        "and it is said to be an <span style=\"color:blue\">*explicit form*</span> because given the value of the $y_k$, we can directly compute $y_{k+1}$ using the formula\n",
        "\n",
        "* There are two types of errors involved in this approach: First, the truncation of\n",
        "the Taylor series gives error that limits the accuracy of the method. Second, using the approximation of $y_k$ given by the previous iteration when computing $y_{k+1}$ gives an additional error that may accumulate over successive iterations, and that can affect the *stability* of the method\n",
        "\n",
        "* An alternative form, which can be derived in a similar manner, is the <span style=\"color:blue\">*backward Euler method*</span>, $\\,$given by the iteration formula\n",
        "\n",
        "  $$\\color{red}{y_{k+1} \\approx y_{k} +f(x_{k+1}, y_{k+1}) h_k}$$\n",
        "\n",
        "  This is an example of <span style=\"color:green\">a backward differentiation formula(BDF)</span>, which is <span style=\"color:blue\">*implicit*</span>, $\\,$because $y_{k+1}$ occurs on both sides of the equation. $~$To compute $y_{k+1}$, $\\text{ }$we therefore need to solve an algebraic equation (for example using Newton’s method)\n",
        "\n",
        "* Implicit methods are more complicated to implement than explicit methods, and each iteration requires more computational work. However, the advantage is that implicit methods generally have *larger stability region* and *better accuracy*, which means that larger step size $h_k$ can be used while still obtaining an accurate and stable solution \n",
        "\n",
        "* Implicit methods are often particularly useful for stiff problems, which loosely speaking are ODE problems that describe dynamics with multiple disparate time scales\n",
        "\n",
        "* There are several methods to improve upon the first-order Euler forward and backward methods. One strategy is to keep higher-order terms in the Taylor-series expansion of $y(x + h)$. $\\,$However, such methods require evaluating higher-order derivatives of $y(x)$, which may be a problem \n",
        "\n",
        "  Ways around this problem include to approximate the higher-order derivatives using finite-difference approximations of the derivatives, or <span style=\"color:blue\">by sampling the function $f(x, y(x))$ at intermediary points in the interval $[x_k, x_{k+1}]$</span> \n",
        "\n",
        "  An example of this type of method is the well-known <span style=\"color:blue\">*Runge-Kutta method*</span>, which is a single-step method that uses additional evaluations of $f(x, y(x))$. The most well-known Runge-Kutta method is the 4th-order scheme:\n",
        "\n",
        "  $$\\color{red}{y_{k+1} = y_k +\\frac{h_k}{6} (k_1 +2k_2 +2k_3 +k_4)}$$\n",
        "\n",
        "  where\n",
        "\n",
        "  $$ \n",
        "  \\begin{aligned}\n",
        "    k_1 &= f(t_k, \\,y_k)\\\\ \n",
        "    k_2 &= f\\left(t_k + \\frac{h_k}{2},\\, y_k +h_k \\frac{k_1}{2} \\right)\\\\ \n",
        "    k_3 &= f\\left(t_k + \\frac{h_k}{2},\\, y_k +h_k \\frac{k_2}{2} \\right)\\\\ \n",
        "    k_4 &= f(t_k +h_k, \\,y_k +h_k k_3)\n",
        "  \\end{aligned}\n",
        "  $$\n",
        "\n",
        "* Here, $k_1$ to $k_4$ are four different evaluations of the ODE function $f(x, y(x))$ that are used in the explicit formula for $y_{k+1}$ given above. The resulting estimate of $y_{k+1}$ is accurate to 4-th order, with an error of 5-th order.\n",
        "\n",
        "  Higher-order schemes that use more function evaluations can also be constructed. <span style=\"color:blue\">By combining two methods of different order</span>, it can be possible to also estimate the error in the approximation. \n",
        "\n",
        "  A popular combination is the Runge-Kutta 4-th and 5-th order schemes, which results in a 4-th order accurate method with error estimates. It is known as <span style=\"color:blue\">*RK45*</span> or the *Runge-Kutta-Fehlberg method*. The <span style=\"color:blue\">*Dormand-Prince method*</span> is another example of a higher-order method, which additionally uses adaptive step size control. For example, the 8-5-3 method combines 3rd and 5-th order schemes to produce an 8-th order method\n",
        "\n",
        "* An alternative method is <span style=\"color:blue\">to use more than one previous value of $y_k$ to compute $y_{k+1}$</span>. Such methods are\n",
        "known as <span style=\"color:blue\">*multistep methods*</span>, and can in general be written on the form\n",
        "\n",
        "  $$\\color{red}{y_{k + s} = \\sum_{n=0}^{s-1} a_n y_{k + n} + h \\sum_{n=0}^{s} b_n f(x_{k + n}, y_{k + n})}$$\n",
        "\n",
        "  This formula means that to compute $y_{k+s}$, the previous $s$ values of $y_k$ and $f(x_k, y_k)$ are used (known as an $s$-step method). The choices of the coefficients $a_n$ and $b_n$ give rise to different multistep methods. Note that <span style=\"color:blue\">if $b_s = 0$, then the method is *explicit*, and if $b_s \\neq 0$ it is *implicit*</span>\n",
        "\n",
        "* For example, $b_0 = b_1 = \\cdots = b_{s-1} = 0$ gives the general formula for an $s$-step BDF formula, where $a_n$ and $b_s$ are chosen to maximize the order of the accuracy. For example, the one-step BDF method with $b_1 = a_0 = 1$ reduces to the backward Euler method, and the two-step BDF method, \n",
        "\n",
        "  $$y_{k+2} = a_0 y_k +a_1 y_{k+1} +hb_2 f(x_{k+2}, y_{k+2})$$\n",
        "\n",
        "  when solved for the coefficients $(a_0, a_1, b_2)$ becomes $(-\\frac{1}{3},\\,\\frac{4}{3},\\,\\frac{2}{3})$\n",
        "\n",
        "* Another family of multistep methods are the Adams methods, which result from the choice \n",
        "\n",
        "  $$\\color{red}{a_0 = a_1 = \\cdots = a_{s-2} = 0, \\text{ and } a_{s-1}=1}$$ \n",
        "\n",
        "  where again the remaining unknown coefficients are chosen to maximize\n",
        "the order of the method\n",
        "\n",
        "  Specifically, <span style=\"color:blue\">the explicit method with $b_s = 0$ are known as Adams-Bashforth methods, and the implicit methods with $b_s \\neq 0$ are known as Adams-Moulton methods</span>. For example, the one-step Adams-Bashforth and Adams-Moulton methods reduce to the forward and backward Euler\n",
        "methods, respectively \n",
        "\n",
        "  And the two-step methods are\n",
        "\n",
        "  $$y_{k+2} = y_{k+1} + h \\left[ -\\frac{1}{2} f(x_{k}, y_{k}) + \\frac{3}{2} f(x_{k+1}, y_{k+1}) \\right]$$\n",
        "\n",
        "  and\n",
        "\n",
        "  $$y_{k+1} = y_{k} + \\frac{h}{2} \\left[ f(x_{k}, y_{k}) + f(x_{k+1}, y_{k+1}) \\right]$$\n",
        "\n",
        "* In general, explicit methods are more convenient to implement and less computationally demanding to iterate than implicit methods, which in principle requires solving (a potentially nonlinear) equation in each iteration with an initial guess for the unknown $y_{k+1}$\n",
        "\n",
        "  However, as mentioned earlier, implicit methods often are more accurate and have superior stability properties. A compromise that retain some of the advantages of both methods is <span style=\"color:blue\">to combine explicit and implicit methods</span> in the following way:\n",
        "\n",
        "  * <span style=\"color:red\">First compute $y_{k+1}$ using an explicit method</span>, \n",
        "\n",
        "  * <span style=\"color:red\">then use this $y_{k+1}$ as an initial guess for solving the equation for $y_{k+1}$ given by an implicit method</span>.\n",
        "\n",
        "  This equation does not need to be solved exactly, and since the initial guess from the explicit method should be quite good, a fixed number of iterations, using for example Newton's method, could be sufficient. Methods like these, where an explicit method is used to predict $y_{k+1}$ and an implicit method is used to correct the prediction, are called <span style=\"color:blue\">*predictor-corrector methods*</span>\n",
        "\n",
        "## Numerical integration of ODEs using `scipy`\n",
        "\n",
        "* The `integrate` module of `scipy` provides the ODE solver interface: `integrate.solve_ivp`. This function numerically integrates a system of ordinary differential equations given an initial value:\n",
        "\n",
        "  $$\\begin{aligned}\n",
        "  \\frac{d\\mathbf{y}}{dt}&= \\mathbf{f}(t, \\mathbf{y})\\\\ \n",
        "  \\mathbf{y}(t_0)&= \\mathbf{y}_0 \n",
        "  \\end{aligned}$$\n",
        "\n",
        "* Explicit Runge-Kutta methods `('RK23','RK45','DOP853')` should be used for non-stiff problems and implicit methods `('Radau','BDF')` for stiff problems. Among Runge-Kutta methods, `'DOP853'` is recommended for solving with high precision (low values of `rtol` and `atol`)\n",
        "\n",
        "  If not sure, first try to run `'RK45'`. If it makes unusually many iterations, diverges, or fails, your problem is likely to be stiff and you should use `'Radau'` or `'BDF'`. `'LSODA'` can also be a good universal choice, but it might be somewhat less convenient to work with as it wraps old Fortran code\n",
        "\n",
        "* For example, $\\,$consider again the scalar ODE \n",
        "\n",
        "  $$y'(x) = f(x, y(x)) = x + y^2(x)$$"
      ],
      "id": "387311ad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from scipy import integrate\n",
        "\n",
        "def dydx(x, y):   \n",
        "    return x +y*y\n",
        "\n",
        "y0 = [0]\n",
        "\n",
        "sol_p = integrate.solve_ivp(dydx, [0, 1.9], y0)\n",
        "sol_m = integrate.solve_ivp(dydx, [0, -5], y0)"
      ],
      "id": "01bffb62",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "fig, ax = plt.subplots(1, 1, figsize=(6, 6))\n",
        "plot_direction_field(x, y(x), f, ax=ax)\n",
        "ax.plot(sol_p.t, sol_p.y.T, 'g', lw=2)\n",
        "ax.plot(sol_m.t, sol_m.y.T, 'r', lw=2)"
      ],
      "id": "21871935",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* In the previous example, we solved a scalar ODE problem. More often we are interested in vector-valued ODE problems (systems of ODEs). To see how we can solve that kind of problems using `solve_ivp`, consider the Lokta-Volterra equations for the dynamics of a population of predator and prey animals (a classic example of coupled ODEs). The equations are\n",
        "\n",
        "  $$\n",
        "  x'(t) = a x - b x y\n",
        "  $$\n",
        "\n",
        "  $$\n",
        "  y'(t) = c x y - d y\n",
        "  $$\n",
        "\n",
        "  where $x(t)$ is the number of prey animals and $y(t)$ is the number of predator animals, and the coefficients $a$, $b$, $c$, and $d$ describe the rates of the processes in the model\n"
      ],
      "id": "5db0875a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "a, b, c, d = 0.4, 0.002, 0.001, 0.7\n",
        "def f(t, xy):\n",
        "  x, y = xy\n",
        "  return [a *x -b *x *y, c *x *y -d *y]"
      ],
      "id": "a6147f52",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "xy0 = [600, 400]\n",
        "sol = integrate.solve_ivp(f, [0, 50], xy0, \n",
        "        t_eval=np.linspace(0, 50, 400))\n",
        "\n",
        "t = sol.t\n",
        "xy_t = sol.y.T"
      ],
      "id": "fa918bfe",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "fig, axes = plt.subplots(2, 1, figsize=(6, 12))\n",
        "\n",
        "axes[0].plot(t, xy_t[:,0], 'r', label=\"Prey\")\n",
        "axes[0].plot(t, xy_t[:,1], 'b', label=\"Predator\")\n",
        "axes[0].set_xlabel(\"Time\")\n",
        "axes[0].set_ylabel(\"Number of animals\")\n",
        "axes[0].legend()\n",
        "axes[0].set_xlim(0, 50)\n",
        "axes[0].set_ylim(0, 1400)\n",
        "axes[0].tick_params(which='both', direction='in')\n",
        "\n",
        "axes[1].plot(xy_t[:,0], xy_t[:,1], 'k')\n",
        "axes[1].set_xlabel(\"Number of prey\")\n",
        "axes[1].set_ylabel(\"Number of predators\")\n",
        "axes[1].set_xlim(300, 1300)\n",
        "axes[1].set_ylim(50, 450)\n",
        "axes[1].tick_params(which='both', direction='in')"
      ],
      "id": "fd6952fa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* In the previous two examples, the function for the right-hand side of the ODE was implemented without additional arguments. Rather than using global variables, it is often convenient and elegant to implement the `f` function in such a way that it takes arguments for all its coefficient or parameters. To illustrate this point, let’s consider another famous ODE problem: the Lorenz equations, which is the following system of three\n",
        "coupled nonlinear ODEs,\n",
        "\n",
        "  $$\n",
        "    \\begin{aligned}\n",
        "    x'(t) &= \\sigma(y - x)\\\\ \n",
        "    y'(t) &= x(\\rho - z) - y \\\\ \n",
        "    z'(t) &= x y - \\beta z\n",
        "    \\end{aligned}\n",
        "  $$\n"
      ],
      "id": "78d7fe18"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "rho, sigma, beta = 28, 8, 8/3.0\n",
        "\n",
        "def f(t, xyz, rho, sigma, beta):\n",
        "  x, y, z = xyz\n",
        "  return [sigma *(y -x), x *(rho -z) -y, x *y -beta *z]"
      ],
      "id": "66ec0a63",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "xyz0 = [1.0, 1.0, 1.0]\n",
        "\n",
        "t_span = [0, 25]\n",
        "t_eval = np.linspace(0, 25, 10000)\n",
        "\n",
        "sol1 = integrate.solve_ivp(f, t_span, xyz0, \n",
        "          t_eval=t_eval, args=(rho, sigma, beta))\n",
        "sol2 = integrate.solve_ivp(f, t_span, xyz0, \n",
        "          t_eval=t_eval, args=(rho, sigma, 0.6*beta))\n",
        "sol3 = integrate.solve_ivp(f, t_span, xyz0, \n",
        "          t_eval=t_eval, args=(rho, 2*sigma, 0.6*beta))"
      ],
      "id": "521599d0",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(7, 15), \n",
        "  subplot_kw={'projection': '3d'})\n",
        "\n",
        "xyz1 = sol1.y\n",
        "xyz2 = sol2.y\n",
        "xyz3 = sol3.y\n",
        "\n",
        "for ax, xyz, c in [(ax1, xyz1, 'r'), \n",
        "                   (ax2, xyz2, 'b'), \n",
        "                   (ax3, xyz3, 'g')]:\n",
        "    ax.plot(xyz[0,:], xyz[1,:], xyz[2,:], c, alpha=0.5)\n",
        "\n",
        "    ax.set_xlabel('$x$', fontsize=12)\n",
        "    ax.set_ylabel('$y$', fontsize=12)\n",
        "    ax.set_zlabel('$z$', fontsize=12)\n",
        "    ax.set_xticks([-15, 0, 15])\n",
        "    ax.set_yticks([-20, 0, 20])\n",
        "    ax.set_zticks([0, 20, 40])"
      ],
      "id": "7f79847f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* To illustrate how to use the `integrate.ode` interface, $\\,$we first look at the following sets of coupled second-order ODEs:\n",
        "\n",
        "  $$\n",
        "  \\begin{aligned}\n",
        "  m_1 x_1''(t) + \\gamma_1 x_1'(t) + k_1 x_1(t) - k_2 (x_2(t) - x_1(t)) &= 0\\\\\n",
        "  m_2 x_2''(t) + \\gamma_2 x_2'(t) + k_2 (x_2(t) - x_1(t)) &= 0\n",
        "  \\end{aligned}\n",
        "  $$\n",
        "\n",
        "  These equations describe the dynamics of two coupled springs, where $x_1(t)$ and $x_2(t)$ are the displacement of two objects, with masses $m_1$ and $m_2$, from their equilibrium positions. The object at $x_1$ is connected to a fixed wall via a spring with spring constant $k_1$, and connected to the object at $x_2$ via a spring with spring constant $k_2$. Both objects are subject to damping forces characterized by $\\gamma_1$ and $\\gamma_2$, respectively\n",
        "\n",
        "* To solve this kind of problem with `scipy`, we first have to write it in standard form, which we can do by introducing $y_0(t) =x_1(t)$, $\\,y_1(t) =x_1'(t)$, $\\,y_2(t) =x_2(t)$, $\\,$and $\\,y_3(t) =x_2'(t)$, which results in four coupled first-order equations:\n",
        "\n",
        "  $$\n",
        "    \\frac{d}{dt} \n",
        "    \\begin{bmatrix}\n",
        "      y_0(t)\\\\ \n",
        "      y_1(t)\\\\ \n",
        "      y_2(t)\\\\ \n",
        "      y_3(t)\n",
        "      \\end{bmatrix} =\n",
        "      \\begin{bmatrix}\n",
        "      y_1(t) \\\\\n",
        "      \\left[-\\gamma_1 y_1(t) -k_1 y_0(t) -k_2 y_0(t) +k_2 y_2(t)\\right]/m_1 \\\\\n",
        "      y_3(t) \\\\\n",
        "      \\left[-\\gamma_2 y_3(t) -k_2 y_2(t) +k_2 y_0(t)\\right]/m_2 \n",
        "    \\end{bmatrix} \n",
        "  $$"
      ],
      "id": "8c1bcdb7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def f(t, y, args):\n",
        "  m1, k1, g1, m2, k2, g2 = args\n",
        "    \n",
        "  return [y[1], \n",
        "        - k1/m1 *y[0] +k2/m1 *(y[2] -y[0]) -g1/m1 *y[1], \n",
        "          y[3], \n",
        "        - k2/m2 *(y[2] -y[0]) -g2/m2 *y[3]]"
      ],
      "id": "0eae29fd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "m1, k1, g1, m2, k2, g2 = 1.0, 10.0, 0.5, 2.0, 40.0, 0.25\n",
        "args = (m1, k1, g1, m2, k2, g2)\n",
        "\n",
        "y0 = [1.0, 0, 0.5, 0]\n",
        "t = np.linspace(0, 20, 1000)"
      ],
      "id": "9b6f4c99",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* Instead of calling the `solve_ivp` function, $\\,$we now need to create an instance of the class `integrate.ode`, $\\,$passing the ODE function $f$ as an argument:"
      ],
      "id": "a6517984"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "r = integrate.ode(f)"
      ],
      "id": "760b2b05",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# the possible first argument: \n",
        "# vode, zvode, lsoda, dopri5 and dop853\n",
        "r.set_integrator('lsoda') \n",
        "r.set_initial_value(y0, t[0])\n",
        "r.set_f_params(args)\n",
        "\n",
        "dt = t[1] -t[0]\n",
        "y = np.zeros((len(t), len(y0)))\n",
        "idx = 0\n",
        "while r.successful() and r.t < t[-1]:\n",
        "  y[idx, :] = r.y\n",
        "  r.integrate(r.t +dt)\n",
        "  idx += 1"
      ],
      "id": "0c402205",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* This is arguably not as convenient as simply calling the `solive_ivp`, but it offers extra flexibility that sometimes is exactly what is needed"
      ],
      "id": "e8bd688b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-align: center\n",
        "fig = plt.figure(figsize=(5, 10))\n",
        "\n",
        "ax1 = plt.subplot2grid((10, 4), (0, 0), colspan=4, rowspan=3)\n",
        "ax2 = plt.subplot2grid((10, 4), (3, 0), colspan=4, rowspan=3)\n",
        "ax3 = plt.subplot2grid((10, 4), (6, 0), colspan=4, rowspan=4)\n",
        "\n",
        "# x_1 vs time plot\n",
        "ax1.plot(t, y[:, 0], 'r')\n",
        "ax1.set_ylabel('$x_1$', fontsize=12)\n",
        "ax1.set_yticks([-1, -.5, 0, .5, 1])\n",
        "ax1.set_xlim(0, 20)\n",
        "ax1.set_ylim(-1.0, 1.0)\n",
        "ax1.tick_params(which='both', direction='in', axis='x', pad=7)\n",
        "\n",
        "# x2 vs time plot\n",
        "ax2.plot(t, y[:, 2], 'b')\n",
        "ax2.set_xlabel('$t$', fontsize=12)\n",
        "ax2.set_ylabel('$x_2$', fontsize=12)\n",
        "ax2.set_yticks([-1, -.5, 0, .5, 1])\n",
        "ax2.set_xlim(0, 20)\n",
        "ax2.set_ylim(-1.0, 1.0)\n",
        "ax2.tick_params(which='both', direction='in', axis='x', pad=7)\n",
        "\n",
        "# x1 and x2 phase space plot\n",
        "ax3.plot(y[:, 0], y[:, 2], 'g')\n",
        "ax3.set_xlabel('$x_1$', fontsize=12)\n",
        "ax3.set_ylabel('$x_2$', fontsize=12)\n",
        "ax3.set_xticks([-1, -.5, 0, .5, 1])\n",
        "ax3.set_yticks([-1, -.5, 0, .5, 1])\n",
        "ax3.set_xlim(-1.0, 1.00)\n",
        "ax3.set_ylim(-1.0, 1.0)\n",
        "ax3.tick_params(which='both', direction='in', axis='x', pad=7)\n",
        "\n",
        "fig.tight_layout()"
      ],
      "id": "e13ebbd6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* Python functions for both $f(t, y(t))$ and its Jacobian can conveniently be generated using `sympy`'s `lambdify`, provided that the ODE problem first can be defined as a `sympy` expression. This symbolic-numeric hybrid approach is a powerful method to solving ODE problems(See @sec-double-pendulum)"
      ],
      "id": "9c5dbcf5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}